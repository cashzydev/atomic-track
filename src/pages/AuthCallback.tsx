import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { Loader2 } from 'lucide-react';

const AuthCallback: React.FC = () => {
  const navigate = useNavigate();
  const [isProcessing, setIsProcessing] = useState(true);

  // Logs imediatos quando o componente √© montado
  useEffect(() => {
    console.log('üö® ========== AuthCallback COMPONENTE MONTADO ==========');
    console.log('üö® Timestamp:', new Date().toISOString());
    console.log('üö® URL completa:', window.location.href);
    console.log('üö® Pathname:', window.location.pathname);
    console.log('üö® Search:', window.location.search);
    console.log('üö® Hash:', window.location.hash);
    console.log('üö® Hash (completo):', window.location.hash || '(vazio)');
    console.log('üö® Origin:', window.location.origin);
    console.log('üö® Hostname:', window.location.hostname);
    console.log('üö® Protocol:', window.location.protocol);
    console.log('üö® ================================================');
  }, []);

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        setIsProcessing(true);
        
        console.log('üîÑ AuthCallback handler iniciado');
        console.log('üìç URL atual:', window.location.href);
        console.log('üìç Pathname:', window.location.pathname);
        console.log('üìç Hash completo:', window.location.hash || '(sem hash)');
        console.log('üìç Origin:', window.location.origin);
        console.log('üìç Hostname:', window.location.hostname);
        
        // Verificar se estamos no dom√≠nio correto
        const isValidDomain = window.location.hostname.includes('atomictrack.com.br') || 
                              window.location.hostname.includes('localhost') ||
                              window.location.hostname.includes('127.0.0.1');
        
        if (!isValidDomain) {
          console.error('‚ùå Hostname inesperado:', window.location.hostname);
          console.error('‚ùå Esperado: atomictrack.com.br ou localhost');
          toast.error(`Dom√≠nio inv√°lido: ${window.location.hostname}`);
          navigate('/auth', { replace: true });
          return;
        } else {
          console.log('‚úÖ Dom√≠nio v√°lido:', window.location.hostname);
        }

        // Analisar hash se presente
        if (window.location.hash) {
          const hashParams = new URLSearchParams(window.location.hash.substring(1));
          console.log('üîë Par√¢metros no hash:');
          hashParams.forEach((value, key) => {
            // N√£o logar valores completos por seguran√ßa, apenas indicadores
            if (key.includes('token') || key.includes('access')) {
              console.log(`  - ${key}: ${value.substring(0, 20)}... (truncado por seguran√ßa)`);
            } else {
              console.log(`  - ${key}: ${value}`);
            }
          });
        } else {
          console.warn('‚ö†Ô∏è Nenhum hash presente na URL - pode indicar que n√£o veio do OAuth');
        }
        
        // O Supabase processa automaticamente os tokens do hash da URL
        console.log('‚è≥ Aguardando processamento do Supabase...');
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Obter a sess√£o atual
        console.log('üîç Buscando sess√£o do Supabase...');
        const { data, error } = await supabase.auth.getSession();
        
        console.log('üìä Resultado getSession:');
        console.log('  - Tem erro?', !!error);
        console.log('  - Tem sess√£o?', !!data?.session);
        console.log('  - Tem user?', !!data?.session?.user);
        
        if (error) {
          console.error('‚ùå Error getting session:', error);
          toast.error('Erro ao processar login. Tente novamente.');
          window.location.hash = '';
          navigate('/auth', { replace: true });
          return;
        }
        
        console.log('‚úÖ Sess√£o obtida:', data.session ? 'Sess√£o encontrada' : 'Sem sess√£o');

        if (data.session?.user) {
          console.log('üë§ Usu√°rio autenticado:', data.session.user.email);
          
          // Verificar se o usu√°rio tem perfil
          console.log('üîç Verificando perfil...');
          const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', data.session.user.id)
            .single();

          if (profileError && profileError.code === 'PGRST116') {
            console.log('üìù Criando novo perfil...');
            // Perfil n√£o existe, criar um
            const { error: insertError } = await supabase
              .from('profiles')
              .insert({
                id: data.session.user.id,
                email: data.session.user.email!,
                name: data.session.user.user_metadata?.name || data.session.user.email?.split('@')[0] || 'Usu√°rio',
                avatar_type: 'initials',
                avatar_color: 'violet',
                tier: 'free',
                xp: 0,
                level: 1
              });

            if (insertError) {
              console.error('‚ùå Error creating profile:', insertError);
            } else {
              console.log('‚úÖ Perfil criado com sucesso');
            }
          } else if (profile) {
            console.log('‚úÖ Perfil encontrado');
          }

          // Limpar hash da URL antes de redirecionar
          window.location.hash = '';
          
          // Verificar status de onboarding
          const onboardingCompleted = data.session.user.user_metadata?.onboarding_completed;
          console.log('üìã Onboarding completo:', onboardingCompleted);
          
          // Pequeno delay para garantir que tudo foi processado
          await new Promise(resolve => setTimeout(resolve, 300));
          
          const redirectPath = onboardingCompleted ? '/dashboard' : '/onboarding';
          console.log('üöÄ Preparando redirecionamento...');
          console.log('  - Destino:', redirectPath);
          console.log('  - Onboarding completo:', onboardingCompleted);
          console.log('  - User ID:', data.session.user.id);
          console.log('  - User Email:', data.session.user.email);
          
          // Limpar hash antes de navegar
          window.location.hash = '';
          console.log('‚úÖ Hash limpo');
          
          navigate(redirectPath, { replace: true });
          console.log('‚úÖ Navega√ß√£o iniciada para:', redirectPath);
        } else {
          console.warn('‚ö†Ô∏è Sem sess√£o de usu√°rio ap√≥s getSession');
          console.warn('‚ö†Ô∏è Isso pode indicar:');
          console.warn('  - Tokens n√£o foram processados corretamente');
          console.warn('  - URL de redirect est√° incorreta');
          console.warn('  - Supabase n√£o conseguiu validar os tokens');
          
          // Limpar hash da URL e redirecionar
          window.location.hash = '';
          toast.error('Login n√£o p√¥de ser processado. Tente novamente.');
          console.log('üîÑ Redirecionando para /auth');
          navigate('/auth', { replace: true });
        }
      } catch (error) {
        console.error('‚ùå ========== ERRO CAPTURADO ==========');
        console.error('‚ùå Error type:', error instanceof Error ? error.constructor.name : typeof error);
        console.error('‚ùå Error message:', error instanceof Error ? error.message : String(error));
        console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'N/A');
        console.error('‚ùå =====================================');
        toast.error('Erro ao processar login. Tente novamente.');
        window.location.hash = '';
        navigate('/auth', { replace: true });
      } finally {
        setIsProcessing(false);
        console.log('üèÅ AuthCallback processamento finalizado');
      }
    };

    handleAuthCallback();
  }, [navigate]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-violet-900/10 to-slate-900 flex items-center justify-center">
      <div className="text-center">
        <img 
          src="/atom-logo.png" 
          alt="atomicTrack"
          className="w-20 h-20 mx-auto mb-6 animate-pulse"
        />
        <div className="flex items-center justify-center gap-3 mb-4">
          <Loader2 className="w-5 h-5 animate-spin text-violet-400" />
          <p className="text-slate-300">Processando login...</p>
        </div>
        <p className="text-sm text-slate-500">Aguarde um momento</p>
      </div>
    </div>
  );
};

export default AuthCallback;

